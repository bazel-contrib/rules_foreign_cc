load("//toolchains/native_tools:native_tools_toolchain.bzl", "native_tool_toolchain")

package(default_visibility = ["//visibility:public"])

native_tool_toolchain(
    name = "preinstalled_make",
    env = select({
        "@platforms//os:windows": {"MAKE": "make.exe"},
        "//conditions:default": {"MAKE": "make"},
    }),
    path = select({
        "@platforms//os:windows": "make.exe",
        "//conditions:default": "make",
    }),
)

native_tool_toolchain(
    name = "preinstalled_nmake",
    path = "nmake.exe",
)

native_tool_toolchain(
    name = "preinstalled_cmake",
    env = select({
        "@platforms//os:windows": {"CMAKE": "cmake.exe"},
        "//conditions:default": {"CMAKE": "cmake"},
    }),
    path = select({
        "@platforms//os:windows": "cmake.exe",
        "//conditions:default": "cmake",
    }),
)

native_tool_toolchain(
    name = "preinstalled_ninja",
    env = select({
        "@platforms//os:windows": {"NINJA": "ninja.exe"},
        "//conditions:default": {"NINJA": "ninja"},
    }),
    path = select({
        "@platforms//os:windows": "ninja.exe",
        "//conditions:default": "ninja",
    }),
)

native_tool_toolchain(
    name = "preinstalled_meson",
    path = select({
        "@platforms//os:windows": "meson.exe",
        "//conditions:default": "meson",
    }),
)

native_tool_toolchain(
    name = "preinstalled_autoconf",
    path = select({
        "@platforms//os:windows": "autoconf.exe",
        "//conditions:default": "autoconf",
    }),
)

native_tool_toolchain(
    name = "preinstalled_automake",
    path = select({
        "@platforms//os:windows": "automake.exe",
        "//conditions:default": "automake",
    }),
)

native_tool_toolchain(
    name = "preinstalled_m4",
    path = select({
        "@platforms//os:windows": "m4.exe",
        "//conditions:default": "m4",
    }),
)

native_tool_toolchain(
    name = "preinstalled_pkgconfig",
    path = select({
        "@platforms//os:windows": "pkg-config.exe",
        "//conditions:default": "pkg-config",
    }),
)
