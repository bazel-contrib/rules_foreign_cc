""" A U T O G E N E R A T E D  -- D O   N O T   M O D I F Y
@generated

This file is generated by prebuilt_toolchains.py
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("@rules_foreign_cc//toolchains:prebuilt_toolchains_repository.bzl", "prebuilt_toolchains_repository")

_CMAKE_BUILD_FILE = """\
load("@rules_foreign_cc//tools/build_defs/native_tools:native_tools_toolchain.bzl", "native_tool_toolchain")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "cmake_data",
    srcs = glob(
        [
            "**",
        ],
        exclude = [
            "WORKSPACE",
            "WORKSPACE.bazel",
            "BUILD",
            "BUILD.bazel",
        ],
    ),
)

filegroup(
    name = "cmake_bin",
    srcs = ["bin/{bin}"],
    data = [":cmake_data"],
)

native_tool_toolchain(
    name = "cmake_tool",
    path = "$(execpath :cmake_bin)",
    target = ":cmake_bin",
)
"""

_NINJA_BUILD_FILE = """\
load("@rules_foreign_cc//tools/build_defs/native_tools:native_tools_toolchain.bzl", "native_tool_toolchain")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "ninja_bin",
    srcs = ["{bin}"],
)

native_tool_toolchain(
    name = "ninja_tool",
    path = "$(execpath :ninja_bin)",
    target = ":ninja_bin",
)
"""

# buildifier: disable=unnamed-macro
def prebuilt_toolchains(cmake_version, ninja_version):
    """Register toolchains for pre-built cmake and ninja binaries

    Args:
        cmake_version (string): The target cmake version
        ninja_version (string): The target ninja-build version
    """
    _cmake_toolchains(cmake_version)
    _ninja_toolchains(ninja_version)
    _make_toolchains()

def _cmake_toolchains(version):
    if "3.19.5" == version:
        maybe(
            http_archive,
            name = "cmake-3.19.5-Linux-aarch64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-Linux-aarch64.tar.gz",
            ],
            sha256 = "31b3de5e4bc56d96debaa336ffd19cbc6edeaea0828ec1e298f0dd09db55f0f4",
            strip_prefix = "cmake-3.19.5-Linux-aarch64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.19.5-Linux-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-Linux-x86_64.tar.gz",
            ],
            sha256 = "ad9102717d67a0e6d72d03d2a25dbbde24386b15b7815b31068cbf5f790638f1",
            strip_prefix = "cmake-3.19.5-Linux-x86_64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.19.5-macos-universal",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-macos-universal.tar.gz",
            ],
            sha256 = "bf38acc7f93980a9dff11ef1bd9b0d6852618a44edcdabc4722737fc83f5654b",
            strip_prefix = "cmake-3.19.5-macos-universal/CMake.app/Contents",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.19.5-win32-x86",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-win32-x86.zip",
            ],
            sha256 = "bb51f578195ca6587afe4e2fc67f6755fd6962aa0eb897713f309ac4567da6f4",
            strip_prefix = "cmake-3.19.5-win32-x86",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.19.5-win64-x64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.19.5/cmake-3.19.5-win64-x64.zip",
            ],
            sha256 = "e2e12729ac43fb4702aedede0383601ea0d63b75d22f892f944d32749da123fd",
            strip_prefix = "cmake-3.19.5-win64-x64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "cmake_3.19.5_toolchains",
            repos = {
                "cmake-3.19.5-Linux-aarch64": [
                    "@platforms//cpu:aarch64",
                    "@platforms//os:linux"
                ],
                "cmake-3.19.5-Linux-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "cmake-3.19.5-macos-universal": [
                    "@platforms//os:macos"
                ],
                "cmake-3.19.5-win32-x86": [
                    "@platforms//cpu:x86_32",
                    "@platforms//os:windows"
                ],
                "cmake-3.19.5-win64-x64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "cmake",
        )

        native.register_toolchains(
            "@cmake_3.19.5_toolchains//:cmake-3.19.5-Linux-aarch64_toolchain",
            "@cmake_3.19.5_toolchains//:cmake-3.19.5-Linux-x86_64_toolchain",
            "@cmake_3.19.5_toolchains//:cmake-3.19.5-macos-universal_toolchain",
            "@cmake_3.19.5_toolchains//:cmake-3.19.5-win32-x86_toolchain",
            "@cmake_3.19.5_toolchains//:cmake-3.19.5-win64-x64_toolchain",
        )

        return

    if "3.18.6" == version:
        maybe(
            http_archive,
            name = "cmake-3.18.6-Darwin-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6-Darwin-x86_64.tar.gz",
            ],
            sha256 = "676dc3f1d6f15cd7c1d9f4fa7e2a43613f426cd20783c02d4fdb5e139f39eec3",
            strip_prefix = "cmake-3.18.6-Darwin-x86_64/CMake.app/Contents",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.18.6-Linux-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6-Linux-x86_64.tar.gz",
            ],
            sha256 = "87136646867ed65e935d6bacd44d52a740c448ad0806f6897d8c3d47ce438c8b",
            strip_prefix = "cmake-3.18.6-Linux-x86_64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.18.6-win32-x86",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6-win32-x86.zip",
            ],
            sha256 = "f6531568def18afecf3d54abd7ccf1f9cf092c683b14fde36b47910c7f822e8d",
            strip_prefix = "cmake-3.18.6-win32-x86",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.18.6-win64-x64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6-win64-x64.zip",
            ],
            sha256 = "6a7166841bf2d72d56b5ff8c7c7606901bd8a0d87194f509b759d3ae3b6fdd6e",
            strip_prefix = "cmake-3.18.6-win64-x64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "cmake_3.18.6_toolchains",
            repos = {
                "cmake-3.18.6-Darwin-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "cmake-3.18.6-Linux-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "cmake-3.18.6-win32-x86": [
                    "@platforms//cpu:x86_32",
                    "@platforms//os:windows"
                ],
                "cmake-3.18.6-win64-x64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "cmake",
        )

        native.register_toolchains(
            "@cmake_3.18.6_toolchains//:cmake-3.18.6-Darwin-x86_64_toolchain",
            "@cmake_3.18.6_toolchains//:cmake-3.18.6-Linux-x86_64_toolchain",
            "@cmake_3.18.6_toolchains//:cmake-3.18.6-win32-x86_toolchain",
            "@cmake_3.18.6_toolchains//:cmake-3.18.6-win64-x64_toolchain",
        )

        return

    if "3.17.5" == version:
        maybe(
            http_archive,
            name = "cmake-3.17.5-Darwin-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.17.5/cmake-3.17.5-Darwin-x86_64.tar.gz",
            ],
            sha256 = "7556e90cdf69b3f16e2efe10b3f3557c82488c93de89d7c192729178b573d679",
            strip_prefix = "cmake-3.17.5-Darwin-x86_64/CMake.app/Contents",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.17.5-Linux-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.17.5/cmake-3.17.5-Linux-x86_64.tar.gz",
            ],
            sha256 = "897142368b15a5693c999a7ed2187be20c1b41a68c3711379d32a33469bb29ba",
            strip_prefix = "cmake-3.17.5-Linux-x86_64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.17.5-win32-x86",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.17.5/cmake-3.17.5-win32-x86.zip",
            ],
            sha256 = "666a4f46957aee89c18664a51e1373b3d80c07045b1aada25a9625d208be46bc",
            strip_prefix = "cmake-3.17.5-win32-x86",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.17.5-win64-x64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.17.5/cmake-3.17.5-win64-x64.zip",
            ],
            sha256 = "7134ba36fc031565eb9eb50e37c24be2e4d902e090b5cfd48b5f434aaf6eefa8",
            strip_prefix = "cmake-3.17.5-win64-x64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "cmake_3.17.5_toolchains",
            repos = {
                "cmake-3.17.5-Darwin-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "cmake-3.17.5-Linux-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "cmake-3.17.5-win32-x86": [
                    "@platforms//cpu:x86_32",
                    "@platforms//os:windows"
                ],
                "cmake-3.17.5-win64-x64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "cmake",
        )

        native.register_toolchains(
            "@cmake_3.17.5_toolchains//:cmake-3.17.5-Darwin-x86_64_toolchain",
            "@cmake_3.17.5_toolchains//:cmake-3.17.5-Linux-x86_64_toolchain",
            "@cmake_3.17.5_toolchains//:cmake-3.17.5-win32-x86_toolchain",
            "@cmake_3.17.5_toolchains//:cmake-3.17.5-win64-x64_toolchain",
        )

        return

    if "3.16.9" == version:
        maybe(
            http_archive,
            name = "cmake-3.16.9-Darwin-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.16.9/cmake-3.16.9-Darwin-x86_64.tar.gz",
            ],
            sha256 = "ed0583446e6ee1ff6347c0011a0f7141d7a4fd5b97b51e213a418f12789ea9f9",
            strip_prefix = "cmake-3.16.9-Darwin-x86_64/CMake.app/Contents",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.16.9-Linux-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.16.9/cmake-3.16.9-Linux-x86_64.tar.gz",
            ],
            sha256 = "96d79367dcafb47d606573a4687021d3cb18dd53d83458fc1d6d9c89bf31b553",
            strip_prefix = "cmake-3.16.9-Linux-x86_64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.16.9-win32-x86",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.16.9/cmake-3.16.9-win32-x86.zip",
            ],
            sha256 = "5362139fe0540f5eb88a964a97f5d3a6c74ea5a93bace9916fde3de11fb5af2e",
            strip_prefix = "cmake-3.16.9-win32-x86",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.16.9-win64-x64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.16.9/cmake-3.16.9-win64-x64.zip",
            ],
            sha256 = "60f2296c241b1188c4a5870bbdebf01a2a25a87d21b6f95c1bba924adb94c62f",
            strip_prefix = "cmake-3.16.9-win64-x64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "cmake_3.16.9_toolchains",
            repos = {
                "cmake-3.16.9-Darwin-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "cmake-3.16.9-Linux-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "cmake-3.16.9-win32-x86": [
                    "@platforms//cpu:x86_32",
                    "@platforms//os:windows"
                ],
                "cmake-3.16.9-win64-x64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "cmake",
        )

        native.register_toolchains(
            "@cmake_3.16.9_toolchains//:cmake-3.16.9-Darwin-x86_64_toolchain",
            "@cmake_3.16.9_toolchains//:cmake-3.16.9-Linux-x86_64_toolchain",
            "@cmake_3.16.9_toolchains//:cmake-3.16.9-win32-x86_toolchain",
            "@cmake_3.16.9_toolchains//:cmake-3.16.9-win64-x64_toolchain",
        )

        return

    if "3.15.7" == version:
        maybe(
            http_archive,
            name = "cmake-3.15.7-Darwin-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-Darwin-x86_64.tar.gz",
            ],
            sha256 = "cafa3c3b96cf9877c7bddc024edb3a0dd8abdc123add0f141f825ce61eeb5d1e",
            strip_prefix = "cmake-3.15.7-Darwin-x86_64/CMake.app/Contents",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.15.7-Linux-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-Linux-x86_64.tar.gz",
            ],
            sha256 = "8456a10ac2fd0dc97d13aa4753431a232cf32aecb0976541f7bf867a3f90ec57",
            strip_prefix = "cmake-3.15.7-Linux-x86_64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.15.7-win32-x86",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-win32-x86.zip",
            ],
            sha256 = "9616ad2a72ac1ad76cd25ba8f5c73be8bf881be85af44e442cab9a1700800008",
            strip_prefix = "cmake-3.15.7-win32-x86",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.15.7-win64-x64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-win64-x64.zip",
            ],
            sha256 = "d5c691fd40ba84983a05e205d1db810adf77b90ca76106a27821e9e9405bc31b",
            strip_prefix = "cmake-3.15.7-win64-x64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "cmake_3.15.7_toolchains",
            repos = {
                "cmake-3.15.7-Darwin-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "cmake-3.15.7-Linux-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "cmake-3.15.7-win32-x86": [
                    "@platforms//cpu:x86_32",
                    "@platforms//os:windows"
                ],
                "cmake-3.15.7-win64-x64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "cmake",
        )

        native.register_toolchains(
            "@cmake_3.15.7_toolchains//:cmake-3.15.7-Darwin-x86_64_toolchain",
            "@cmake_3.15.7_toolchains//:cmake-3.15.7-Linux-x86_64_toolchain",
            "@cmake_3.15.7_toolchains//:cmake-3.15.7-win32-x86_toolchain",
            "@cmake_3.15.7_toolchains//:cmake-3.15.7-win64-x64_toolchain",
        )

        return

    if "3.14.7" == version:
        maybe(
            http_archive,
            name = "cmake-3.14.7-Darwin-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.14.7/cmake-3.14.7-Darwin-x86_64.tar.gz",
            ],
            sha256 = "5d69fc79f7dff65a999b5c321d606d9152d7cde0717817c5f4d2b14be4a5862b",
            strip_prefix = "cmake-3.14.7-Darwin-x86_64/CMake.app/Contents",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.14.7-Linux-x86_64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.14.7/cmake-3.14.7-Linux-x86_64.tar.gz",
            ],
            sha256 = "85aa7e9d77a9848bfae26289424d4f1cb4a0b0579b0e30e31148a37f140c33c2",
            strip_prefix = "cmake-3.14.7-Linux-x86_64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.14.7-win32-x86",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.14.7/cmake-3.14.7-win32-x86.zip",
            ],
            sha256 = "55eafae4327cc8cedaf69eb012e3dcfd88e2045279d12c49c7af253c49786237",
            strip_prefix = "cmake-3.14.7-win32-x86",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        maybe(
            http_archive,
            name = "cmake-3.14.7-win64-x64",
            urls = [
                "https://github.com/Kitware/CMake/releases/download/v3.14.7/cmake-3.14.7-win64-x64.zip",
            ],
            sha256 = "e3ce0bdd966dc9a8e9c57ea949bc195c36c6f843bd3e431990d59c381be7ba8e",
            strip_prefix = "cmake-3.14.7-win64-x64",
            build_file_content = _CMAKE_BUILD_FILE.format(
                bin = "cmake.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "cmake_3.14.7_toolchains",
            repos = {
                "cmake-3.14.7-Darwin-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "cmake-3.14.7-Linux-x86_64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "cmake-3.14.7-win32-x86": [
                    "@platforms//cpu:x86_32",
                    "@platforms//os:windows"
                ],
                "cmake-3.14.7-win64-x64": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "cmake",
        )

        native.register_toolchains(
            "@cmake_3.14.7_toolchains//:cmake-3.14.7-Darwin-x86_64_toolchain",
            "@cmake_3.14.7_toolchains//:cmake-3.14.7-Linux-x86_64_toolchain",
            "@cmake_3.14.7_toolchains//:cmake-3.14.7-win32-x86_toolchain",
            "@cmake_3.14.7_toolchains//:cmake-3.14.7-win64-x64_toolchain",
        )

        return

    fail("Unsupported version: " + str(version))

def _ninja_toolchains(version):
    if "1.10.2" == version:
        maybe(
            http_archive,
            name = "ninja_1.10.2_linux",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip",
            ],
            sha256 = "763464859c7ef2ea3a0a10f4df40d2025d3bb9438fcb1228404640410c0ec22d",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.10.2_mac",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-mac.zip",
            ],
            sha256 = "6fa359f491fac7e5185273c6421a000eea6a2f0febf0ac03ac900bd4d80ed2a5",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.10.2_win",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip",
            ],
            sha256 = "bbde850d247d2737c5764c927d1071cbb1f1957dcabda4a130fa8547c12c695f",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "ninja_1.10.2_toolchains",
            repos = {
                "ninja_1.10.2_linux": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "ninja_1.10.2_mac": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "ninja_1.10.2_win": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "ninja",
        )

        native.register_toolchains(
            "@ninja_1.10.2_toolchains//:ninja_1.10.2_linux_toolchain",
            "@ninja_1.10.2_toolchains//:ninja_1.10.2_mac_toolchain",
            "@ninja_1.10.2_toolchains//:ninja_1.10.2_win_toolchain",
        )

        return

    if "1.10.1" == version:
        maybe(
            http_archive,
            name = "ninja_1.10.1_linux",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-linux.zip",
            ],
            sha256 = "7ee7f467a1a747c5b5e02342904af9c24e84df4ca993541f1c4d0f113cab27aa",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.10.1_mac",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-mac.zip",
            ],
            sha256 = "0bd650190d4405c15894055e349d9b59d5690b0389551d757c5ed2d3841972d1",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.10.1_win",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip",
            ],
            sha256 = "5d1211ea003ec9760ad7f5d313ebf0b659d4ffafa221187d2b4444bc03714a33",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "ninja_1.10.1_toolchains",
            repos = {
                "ninja_1.10.1_linux": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "ninja_1.10.1_mac": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "ninja_1.10.1_win": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "ninja",
        )

        native.register_toolchains(
            "@ninja_1.10.1_toolchains//:ninja_1.10.1_linux_toolchain",
            "@ninja_1.10.1_toolchains//:ninja_1.10.1_mac_toolchain",
            "@ninja_1.10.1_toolchains//:ninja_1.10.1_win_toolchain",
        )

        return

    if "1.10.0" == version:
        maybe(
            http_archive,
            name = "ninja_1.10.0_linux",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip",
            ],
            sha256 = "6566836ddf3d72ca06685b34814e0c6fa0f0943542d651d0dab3150f10307c82",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.10.0_mac",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-mac.zip",
            ],
            sha256 = "2ee405c0e205d55666c60cc9c0d8d04c8ede06d3ef2e2c2aabe08fd81c17d22e",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.10.0_win",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip",
            ],
            sha256 = "919fd158c16bf135e8a850bb4046ec1ce28a7439ee08b977cd0b7f6b3463d178",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "ninja_1.10.0_toolchains",
            repos = {
                "ninja_1.10.0_linux": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "ninja_1.10.0_mac": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "ninja_1.10.0_win": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "ninja",
        )

        native.register_toolchains(
            "@ninja_1.10.0_toolchains//:ninja_1.10.0_linux_toolchain",
            "@ninja_1.10.0_toolchains//:ninja_1.10.0_mac_toolchain",
            "@ninja_1.10.0_toolchains//:ninja_1.10.0_win_toolchain",
        )

        return

    if "1.9.0" == version:
        maybe(
            http_archive,
            name = "ninja_1.9.0_linux",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip",
            ],
            sha256 = "1b1235f2b0b4df55ac6d80bbe681ea3639c9d2c505c7ff2159a3daf63d196305",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.9.0_mac",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip",
            ],
            sha256 = "26d32a79f786cca1004750f59e545199bf110e21e300d3c2424c1fddd78f28ab",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.9.0_win",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip",
            ],
            sha256 = "2d70010633ddaacc3af4ffbd21e22fae90d158674a09e132e06424ba3ab036e9",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "ninja_1.9.0_toolchains",
            repos = {
                "ninja_1.9.0_linux": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "ninja_1.9.0_mac": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "ninja_1.9.0_win": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "ninja",
        )

        native.register_toolchains(
            "@ninja_1.9.0_toolchains//:ninja_1.9.0_linux_toolchain",
            "@ninja_1.9.0_toolchains//:ninja_1.9.0_mac_toolchain",
            "@ninja_1.9.0_toolchains//:ninja_1.9.0_win_toolchain",
        )

        return

    if "1.8.2" == version:
        maybe(
            http_archive,
            name = "ninja_1.8.2_linux",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip",
            ],
            sha256 = "d2fea9ff33b3ef353161ed906f260d565ca55b8ca0568fa07b1d2cab90a84a07",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.8.2_mac",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-mac.zip",
            ],
            sha256 = "0347d55c66061652b26f48769d566761630ffde3143793b29064a57f356542cc",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja",
            ),
        )

        maybe(
            http_archive,
            name = "ninja_1.8.2_win",
            urls = [
                "https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-win.zip",
            ],
            sha256 = "c80313e6c26c0b9e0c241504718e2d8bbc2798b73429933adf03fdc6d84f0e70",
            strip_prefix = "",
            build_file_content = _NINJA_BUILD_FILE.format(
                bin = "ninja.exe",
            ),
        )

        # buildifier: leave-alone
        maybe(
            prebuilt_toolchains_repository,
            name = "ninja_1.8.2_toolchains",
            repos = {
                "ninja_1.8.2_linux": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:linux"
                ],
                "ninja_1.8.2_mac": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:macos"
                ],
                "ninja_1.8.2_win": [
                    "@platforms//cpu:x86_64",
                    "@platforms//os:windows"
                ]
            },
            tool = "ninja",
        )

        native.register_toolchains(
            "@ninja_1.8.2_toolchains//:ninja_1.8.2_linux_toolchain",
            "@ninja_1.8.2_toolchains//:ninja_1.8.2_mac_toolchain",
            "@ninja_1.8.2_toolchains//:ninja_1.8.2_win_toolchain",
        )

        return

    fail("Unsupported version: " + str(version))

def _make_toolchains():
    native.register_toolchains("@rules_foreign_cc//tools/build_defs:preinstalled_make_toolchain")
