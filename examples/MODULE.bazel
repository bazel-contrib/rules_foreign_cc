bazel_dep(name = "rules_foreign_cc")
local_path_override(
    module_name = "rules_foreign_cc",
    path = "..",
)

tools = use_extension("@rules_foreign_cc//foreign_cc:extensions.bzl", "tools")
tools.cmake(version = "3.23.1")
tools.ninja(version = "1.11.1")
use_repo(
    tools,
    "meson_src",
)

bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_rust", version = "0.56.0")
bazel_dep(name = "rules_swift", version = "2.1.1", repo_name = "build_bazel_rules_swift")
bazel_dep(name = "rules_apple", version = "3.16.1", repo_name = "build_bazel_rules_apple")
bazel_dep(name = "apple_support", version = "1.17.1", repo_name = "build_bazel_apple_support")
bazel_dep(name = "rules_python", version = "1.2.0")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_shell", version = "0.3.0")
bazel_dep(name = "rules_java", version = "8.6.3")
bazel_dep(name = "rules_perl", version = "0.2.4")

apple_cc_configure = use_extension("@build_bazel_apple_support//crosstool:setup.bzl", "apple_cc_configure_extension")
use_repo(apple_cc_configure, "local_config_apple_cc")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have mulitple toolchain versions.
    is_default = True,
    python_version = "3.10",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.10",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pip")

bazel_dep(name = "rules_android", version = "0.6.0")
bazel_dep(name = "rules_android_ndk", version = "0.1.2")
bazel_dep(name = "rules_jvm_external", version = "6.6")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [
        "com.android.support.constraint:constraint-layout:aar:1.1.2",
        "com.android.support:appcompat-v7:aar:26.1.0",
    ],
    repositories = [
        "https://jcenter.bintray.com/",
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "maven")

bazel_dep(name = "bazel_ci_rules", version = "1.0.0", dev_dependency = True)

rbe_preconfig = use_repo_rule(
    "@bazel_ci_rules//:rbe_repo.bzl",
    "rbe_preconfig",
)

rbe_preconfig(
    name = "buildkite_config",
    toolchain = "ubuntu2004",
)

# https://bazelbuild.github.io/rules_rust/crate_universe_bzlmod.html
rust_example = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")

inject_repo(rust_example, "rules_foreign_cc")

rust_example.annotation(
    # Setting build_script_data makes the files available on disk when the rule runs.
    build_script_data = ["@rules_foreign_cc//toolchains:current_cmake_toolchain"],
    build_script_env = {
        # The toolchain supplies a value of $(CMAKE) which is an execroot-relative path, so we need to prefix it with `$${pwd}/`
        # because build scripts don't typically run in the execroot unlike most bazel rules, for improved compatibility with Cargo.
        "CMAKE": "$${pwd}/$(CMAKE)",
    },
    # Setting build_script_toolchains makes makefile variable substitution work so that we can reference $(CNAME) in attributes.
    build_script_toolchains = ["@rules_foreign_cc//toolchains:current_cmake_toolchain"],
    crate = "libz-ng-sys",
)
rust_example.spec(
    package = "libz-ng-sys",
    version = "=1.1.20",
)
rust_example.from_specs(
    name = "rust_example",
)
use_repo(
    rust_example,
    "rust_example",
)
